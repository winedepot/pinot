/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.pinot.common.request;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * AUTO GENERATED: DO NOT EDIT
 * Broker Query
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-04-28")
public class BrokerRequest implements org.apache.thrift.TBase<BrokerRequest, BrokerRequest._Fields>, java.io.Serializable, Cloneable, Comparable<BrokerRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BrokerRequest");

  private static final org.apache.thrift.protocol.TField QUERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryType", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("querySource", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("timeInterval", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BUCKET_HASH_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketHashKey", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ENABLE_TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("enableTrace", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField RESPONSE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("responseFormat", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DEBUG_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("debugOptions", org.apache.thrift.protocol.TType.MAP, (short)13);
  private static final org.apache.thrift.protocol.TField QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("queryOptions", org.apache.thrift.protocol.TType.MAP, (short)14);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField SELECT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("selectList", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField FILTER_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("filterExpression", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField GROUP_BY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("groupByList", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField ORDER_BY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("orderByList", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField HAVING_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("havingExpression", org.apache.thrift.protocol.TType.STRUCT, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BrokerRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BrokerRequestTupleSchemeFactory());
  }

  private QueryType queryType; // optional
  private QuerySource querySource; // optional
  private String timeInterval; // optional
  private String duration; // optional
  private String bucketHashKey; // optional
  private boolean enableTrace; // optional
  private String responseFormat; // optional
  private Map<String,String> debugOptions; // optional
  private Map<String,String> queryOptions; // optional
  private int version; // optional
  private List<Expression> selectList; // optional
  private Expression filterExpression; // optional
  private List<Expression> groupByList; // optional
  private List<Expression> orderByList; // optional
  private int limit; // optional
  private int offset; // optional
  private Expression havingExpression; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_TYPE((short)1, "queryType"),
    QUERY_SOURCE((short)2, "querySource"),
    TIME_INTERVAL((short)3, "timeInterval"),
    DURATION((short)4, "duration"),
    BUCKET_HASH_KEY((short)10, "bucketHashKey"),
    ENABLE_TRACE((short)11, "enableTrace"),
    RESPONSE_FORMAT((short)12, "responseFormat"),
    DEBUG_OPTIONS((short)13, "debugOptions"),
    QUERY_OPTIONS((short)14, "queryOptions"),
    VERSION((short)17, "version"),
    SELECT_LIST((short)18, "selectList"),
    FILTER_EXPRESSION((short)19, "filterExpression"),
    GROUP_BY_LIST((short)20, "groupByList"),
    ORDER_BY_LIST((short)21, "orderByList"),
    LIMIT((short)22, "limit"),
    OFFSET((short)23, "offset"),
    HAVING_EXPRESSION((short)24, "havingExpression");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_TYPE
          return QUERY_TYPE;
        case 2: // QUERY_SOURCE
          return QUERY_SOURCE;
        case 3: // TIME_INTERVAL
          return TIME_INTERVAL;
        case 4: // DURATION
          return DURATION;
        case 10: // BUCKET_HASH_KEY
          return BUCKET_HASH_KEY;
        case 11: // ENABLE_TRACE
          return ENABLE_TRACE;
        case 12: // RESPONSE_FORMAT
          return RESPONSE_FORMAT;
        case 13: // DEBUG_OPTIONS
          return DEBUG_OPTIONS;
        case 14: // QUERY_OPTIONS
          return QUERY_OPTIONS;
        case 17: // VERSION
          return VERSION;
        case 18: // SELECT_LIST
          return SELECT_LIST;
        case 19: // FILTER_EXPRESSION
          return FILTER_EXPRESSION;
        case 20: // GROUP_BY_LIST
          return GROUP_BY_LIST;
        case 21: // ORDER_BY_LIST
          return ORDER_BY_LIST;
        case 22: // LIMIT
          return LIMIT;
        case 23: // OFFSET
          return OFFSET;
        case 24: // HAVING_EXPRESSION
          return HAVING_EXPRESSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLETRACE_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private static final int __LIMIT_ISSET_ID = 2;
  private static final int __OFFSET_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUERY_TYPE,_Fields.QUERY_SOURCE,_Fields.TIME_INTERVAL,_Fields.DURATION,_Fields.BUCKET_HASH_KEY,_Fields.ENABLE_TRACE,_Fields.RESPONSE_FORMAT,_Fields.DEBUG_OPTIONS,_Fields.QUERY_OPTIONS,_Fields.VERSION,_Fields.SELECT_LIST,_Fields.FILTER_EXPRESSION,_Fields.GROUP_BY_LIST,_Fields.ORDER_BY_LIST,_Fields.LIMIT,_Fields.OFFSET,_Fields.HAVING_EXPRESSION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("queryType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryType.class)));
    tmpMap.put(_Fields.QUERY_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("querySource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QuerySource.class)));
    tmpMap.put(_Fields.TIME_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("timeInterval", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUCKET_HASH_KEY, new org.apache.thrift.meta_data.FieldMetaData("bucketHashKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_TRACE, new org.apache.thrift.meta_data.FieldMetaData("enableTrace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESPONSE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("responseFormat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEBUG_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("debugOptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("queryOptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELECT_LIST, new org.apache.thrift.meta_data.FieldMetaData("selectList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Expression"))));
    tmpMap.put(_Fields.FILTER_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("filterExpression", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Expression")));
    tmpMap.put(_Fields.GROUP_BY_LIST, new org.apache.thrift.meta_data.FieldMetaData("groupByList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Expression"))));
    tmpMap.put(_Fields.ORDER_BY_LIST, new org.apache.thrift.meta_data.FieldMetaData("orderByList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Expression"))));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAVING_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("havingExpression", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Expression")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BrokerRequest.class, metaDataMap);
  }

  public BrokerRequest() {
    this.limit = 10;

    this.offset = 0;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BrokerRequest(BrokerRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQueryType()) {
      this.queryType = new QueryType(other.queryType);
    }
    if (other.isSetQuerySource()) {
      this.querySource = new QuerySource(other.querySource);
    }
    if (other.isSetTimeInterval()) {
      this.timeInterval = other.timeInterval;
    }
    if (other.isSetDuration()) {
      this.duration = other.duration;
    }
    if (other.isSetBucketHashKey()) {
      this.bucketHashKey = other.bucketHashKey;
    }
    this.enableTrace = other.enableTrace;
    if (other.isSetResponseFormat()) {
      this.responseFormat = other.responseFormat;
    }
    if (other.isSetDebugOptions()) {
      Map<String,String> __this__debugOptions = new HashMap<String,String>(other.debugOptions);
      this.debugOptions = __this__debugOptions;
    }
    if (other.isSetQueryOptions()) {
      Map<String,String> __this__queryOptions = new HashMap<String,String>(other.queryOptions);
      this.queryOptions = __this__queryOptions;
    }
    this.version = other.version;
    if (other.isSetSelectList()) {
      List<Expression> __this__selectList = new ArrayList<Expression>(other.selectList.size());
      for (Expression other_element : other.selectList) {
        __this__selectList.add(other_element);
      }
      this.selectList = __this__selectList;
    }
    if (other.isSetFilterExpression()) {
      this.filterExpression = other.filterExpression;
    }
    if (other.isSetGroupByList()) {
      List<Expression> __this__groupByList = new ArrayList<Expression>(other.groupByList.size());
      for (Expression other_element : other.groupByList) {
        __this__groupByList.add(other_element);
      }
      this.groupByList = __this__groupByList;
    }
    if (other.isSetOrderByList()) {
      List<Expression> __this__orderByList = new ArrayList<Expression>(other.orderByList.size());
      for (Expression other_element : other.orderByList) {
        __this__orderByList.add(other_element);
      }
      this.orderByList = __this__orderByList;
    }
    this.limit = other.limit;
    this.offset = other.offset;
    if (other.isSetHavingExpression()) {
      this.havingExpression = other.havingExpression;
    }
  }

  public BrokerRequest deepCopy() {
    return new BrokerRequest(this);
  }

  @Override
  public void clear() {
    this.queryType = null;
    this.querySource = null;
    this.timeInterval = null;
    this.duration = null;
    this.bucketHashKey = null;
    setEnableTraceIsSet(false);
    this.enableTrace = false;
    this.responseFormat = null;
    this.debugOptions = null;
    this.queryOptions = null;
    setVersionIsSet(false);
    this.version = 0;
    this.selectList = null;
    this.filterExpression = null;
    this.groupByList = null;
    this.orderByList = null;
    this.limit = 10;

    this.offset = 0;

    this.havingExpression = null;
  }

  public QueryType getQueryType() {
    return this.queryType;
  }

  public void setQueryType(QueryType queryType) {
    this.queryType = queryType;
  }

  public void unsetQueryType() {
    this.queryType = null;
  }

  /** Returns true if field queryType is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryType() {
    return this.queryType != null;
  }

  public void setQueryTypeIsSet(boolean value) {
    if (!value) {
      this.queryType = null;
    }
  }

  public QuerySource getQuerySource() {
    return this.querySource;
  }

  public void setQuerySource(QuerySource querySource) {
    this.querySource = querySource;
  }

  public void unsetQuerySource() {
    this.querySource = null;
  }

  /** Returns true if field querySource is set (has been assigned a value) and false otherwise */
  public boolean isSetQuerySource() {
    return this.querySource != null;
  }

  public void setQuerySourceIsSet(boolean value) {
    if (!value) {
      this.querySource = null;
    }
  }

  public String getTimeInterval() {
    return this.timeInterval;
  }

  public void setTimeInterval(String timeInterval) {
    this.timeInterval = timeInterval;
  }

  public void unsetTimeInterval() {
    this.timeInterval = null;
  }

  /** Returns true if field timeInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeInterval() {
    return this.timeInterval != null;
  }

  public void setTimeIntervalIsSet(boolean value) {
    if (!value) {
      this.timeInterval = null;
    }
  }

  public String getDuration() {
    return this.duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }

  public void unsetDuration() {
    this.duration = null;
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return this.duration != null;
  }

  public void setDurationIsSet(boolean value) {
    if (!value) {
      this.duration = null;
    }
  }

  public String getBucketHashKey() {
    return this.bucketHashKey;
  }

  public void setBucketHashKey(String bucketHashKey) {
    this.bucketHashKey = bucketHashKey;
  }

  public void unsetBucketHashKey() {
    this.bucketHashKey = null;
  }

  /** Returns true if field bucketHashKey is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketHashKey() {
    return this.bucketHashKey != null;
  }

  public void setBucketHashKeyIsSet(boolean value) {
    if (!value) {
      this.bucketHashKey = null;
    }
  }

  public boolean isEnableTrace() {
    return this.enableTrace;
  }

  public void setEnableTrace(boolean enableTrace) {
    this.enableTrace = enableTrace;
    setEnableTraceIsSet(true);
  }

  public void unsetEnableTrace() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLETRACE_ISSET_ID);
  }

  /** Returns true if field enableTrace is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableTrace() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLETRACE_ISSET_ID);
  }

  public void setEnableTraceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLETRACE_ISSET_ID, value);
  }

  public String getResponseFormat() {
    return this.responseFormat;
  }

  public void setResponseFormat(String responseFormat) {
    this.responseFormat = responseFormat;
  }

  public void unsetResponseFormat() {
    this.responseFormat = null;
  }

  /** Returns true if field responseFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseFormat() {
    return this.responseFormat != null;
  }

  public void setResponseFormatIsSet(boolean value) {
    if (!value) {
      this.responseFormat = null;
    }
  }

  public int getDebugOptionsSize() {
    return (this.debugOptions == null) ? 0 : this.debugOptions.size();
  }

  public void putToDebugOptions(String key, String val) {
    if (this.debugOptions == null) {
      this.debugOptions = new HashMap<String,String>();
    }
    this.debugOptions.put(key, val);
  }

  public Map<String,String> getDebugOptions() {
    return this.debugOptions;
  }

  public void setDebugOptions(Map<String,String> debugOptions) {
    this.debugOptions = debugOptions;
  }

  public void unsetDebugOptions() {
    this.debugOptions = null;
  }

  /** Returns true if field debugOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetDebugOptions() {
    return this.debugOptions != null;
  }

  public void setDebugOptionsIsSet(boolean value) {
    if (!value) {
      this.debugOptions = null;
    }
  }

  public int getQueryOptionsSize() {
    return (this.queryOptions == null) ? 0 : this.queryOptions.size();
  }

  public void putToQueryOptions(String key, String val) {
    if (this.queryOptions == null) {
      this.queryOptions = new HashMap<String,String>();
    }
    this.queryOptions.put(key, val);
  }

  public Map<String,String> getQueryOptions() {
    return this.queryOptions;
  }

  public void setQueryOptions(Map<String,String> queryOptions) {
    this.queryOptions = queryOptions;
  }

  public void unsetQueryOptions() {
    this.queryOptions = null;
  }

  /** Returns true if field queryOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryOptions() {
    return this.queryOptions != null;
  }

  public void setQueryOptionsIsSet(boolean value) {
    if (!value) {
      this.queryOptions = null;
    }
  }

  public int getVersion() {
    return this.version;
  }

  public void setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getSelectListSize() {
    return (this.selectList == null) ? 0 : this.selectList.size();
  }

  public java.util.Iterator<Expression> getSelectListIterator() {
    return (this.selectList == null) ? null : this.selectList.iterator();
  }

  public void addToSelectList(Expression elem) {
    if (this.selectList == null) {
      this.selectList = new ArrayList<Expression>();
    }
    this.selectList.add(elem);
  }

  public List<Expression> getSelectList() {
    return this.selectList;
  }

  public void setSelectList(List<Expression> selectList) {
    this.selectList = selectList;
  }

  public void unsetSelectList() {
    this.selectList = null;
  }

  /** Returns true if field selectList is set (has been assigned a value) and false otherwise */
  public boolean isSetSelectList() {
    return this.selectList != null;
  }

  public void setSelectListIsSet(boolean value) {
    if (!value) {
      this.selectList = null;
    }
  }

  public Expression getFilterExpression() {
    return this.filterExpression;
  }

  public void setFilterExpression(Expression filterExpression) {
    this.filterExpression = filterExpression;
  }

  public void unsetFilterExpression() {
    this.filterExpression = null;
  }

  /** Returns true if field filterExpression is set (has been assigned a value) and false otherwise */
  public boolean isSetFilterExpression() {
    return this.filterExpression != null;
  }

  public void setFilterExpressionIsSet(boolean value) {
    if (!value) {
      this.filterExpression = null;
    }
  }

  public int getGroupByListSize() {
    return (this.groupByList == null) ? 0 : this.groupByList.size();
  }

  public java.util.Iterator<Expression> getGroupByListIterator() {
    return (this.groupByList == null) ? null : this.groupByList.iterator();
  }

  public void addToGroupByList(Expression elem) {
    if (this.groupByList == null) {
      this.groupByList = new ArrayList<Expression>();
    }
    this.groupByList.add(elem);
  }

  public List<Expression> getGroupByList() {
    return this.groupByList;
  }

  public void setGroupByList(List<Expression> groupByList) {
    this.groupByList = groupByList;
  }

  public void unsetGroupByList() {
    this.groupByList = null;
  }

  /** Returns true if field groupByList is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupByList() {
    return this.groupByList != null;
  }

  public void setGroupByListIsSet(boolean value) {
    if (!value) {
      this.groupByList = null;
    }
  }

  public int getOrderByListSize() {
    return (this.orderByList == null) ? 0 : this.orderByList.size();
  }

  public java.util.Iterator<Expression> getOrderByListIterator() {
    return (this.orderByList == null) ? null : this.orderByList.iterator();
  }

  public void addToOrderByList(Expression elem) {
    if (this.orderByList == null) {
      this.orderByList = new ArrayList<Expression>();
    }
    this.orderByList.add(elem);
  }

  public List<Expression> getOrderByList() {
    return this.orderByList;
  }

  public void setOrderByList(List<Expression> orderByList) {
    this.orderByList = orderByList;
  }

  public void unsetOrderByList() {
    this.orderByList = null;
  }

  /** Returns true if field orderByList is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderByList() {
    return this.orderByList != null;
  }

  public void setOrderByListIsSet(boolean value) {
    if (!value) {
      this.orderByList = null;
    }
  }

  public int getLimit() {
    return this.limit;
  }

  public void setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getOffset() {
    return this.offset;
  }

  public void setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public Expression getHavingExpression() {
    return this.havingExpression;
  }

  public void setHavingExpression(Expression havingExpression) {
    this.havingExpression = havingExpression;
  }

  public void unsetHavingExpression() {
    this.havingExpression = null;
  }

  /** Returns true if field havingExpression is set (has been assigned a value) and false otherwise */
  public boolean isSetHavingExpression() {
    return this.havingExpression != null;
  }

  public void setHavingExpressionIsSet(boolean value) {
    if (!value) {
      this.havingExpression = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_TYPE:
      if (value == null) {
        unsetQueryType();
      } else {
        setQueryType((QueryType)value);
      }
      break;

    case QUERY_SOURCE:
      if (value == null) {
        unsetQuerySource();
      } else {
        setQuerySource((QuerySource)value);
      }
      break;

    case TIME_INTERVAL:
      if (value == null) {
        unsetTimeInterval();
      } else {
        setTimeInterval((String)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((String)value);
      }
      break;

    case BUCKET_HASH_KEY:
      if (value == null) {
        unsetBucketHashKey();
      } else {
        setBucketHashKey((String)value);
      }
      break;

    case ENABLE_TRACE:
      if (value == null) {
        unsetEnableTrace();
      } else {
        setEnableTrace((Boolean)value);
      }
      break;

    case RESPONSE_FORMAT:
      if (value == null) {
        unsetResponseFormat();
      } else {
        setResponseFormat((String)value);
      }
      break;

    case DEBUG_OPTIONS:
      if (value == null) {
        unsetDebugOptions();
      } else {
        setDebugOptions((Map<String,String>)value);
      }
      break;

    case QUERY_OPTIONS:
      if (value == null) {
        unsetQueryOptions();
      } else {
        setQueryOptions((Map<String,String>)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case SELECT_LIST:
      if (value == null) {
        unsetSelectList();
      } else {
        setSelectList((List<Expression>)value);
      }
      break;

    case FILTER_EXPRESSION:
      if (value == null) {
        unsetFilterExpression();
      } else {
        setFilterExpression((Expression)value);
      }
      break;

    case GROUP_BY_LIST:
      if (value == null) {
        unsetGroupByList();
      } else {
        setGroupByList((List<Expression>)value);
      }
      break;

    case ORDER_BY_LIST:
      if (value == null) {
        unsetOrderByList();
      } else {
        setOrderByList((List<Expression>)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case HAVING_EXPRESSION:
      if (value == null) {
        unsetHavingExpression();
      } else {
        setHavingExpression((Expression)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_TYPE:
      return getQueryType();

    case QUERY_SOURCE:
      return getQuerySource();

    case TIME_INTERVAL:
      return getTimeInterval();

    case DURATION:
      return getDuration();

    case BUCKET_HASH_KEY:
      return getBucketHashKey();

    case ENABLE_TRACE:
      return isEnableTrace();

    case RESPONSE_FORMAT:
      return getResponseFormat();

    case DEBUG_OPTIONS:
      return getDebugOptions();

    case QUERY_OPTIONS:
      return getQueryOptions();

    case VERSION:
      return getVersion();

    case SELECT_LIST:
      return getSelectList();

    case FILTER_EXPRESSION:
      return getFilterExpression();

    case GROUP_BY_LIST:
      return getGroupByList();

    case ORDER_BY_LIST:
      return getOrderByList();

    case LIMIT:
      return getLimit();

    case OFFSET:
      return getOffset();

    case HAVING_EXPRESSION:
      return getHavingExpression();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY_TYPE:
      return isSetQueryType();
    case QUERY_SOURCE:
      return isSetQuerySource();
    case TIME_INTERVAL:
      return isSetTimeInterval();
    case DURATION:
      return isSetDuration();
    case BUCKET_HASH_KEY:
      return isSetBucketHashKey();
    case ENABLE_TRACE:
      return isSetEnableTrace();
    case RESPONSE_FORMAT:
      return isSetResponseFormat();
    case DEBUG_OPTIONS:
      return isSetDebugOptions();
    case QUERY_OPTIONS:
      return isSetQueryOptions();
    case VERSION:
      return isSetVersion();
    case SELECT_LIST:
      return isSetSelectList();
    case FILTER_EXPRESSION:
      return isSetFilterExpression();
    case GROUP_BY_LIST:
      return isSetGroupByList();
    case ORDER_BY_LIST:
      return isSetOrderByList();
    case LIMIT:
      return isSetLimit();
    case OFFSET:
      return isSetOffset();
    case HAVING_EXPRESSION:
      return isSetHavingExpression();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BrokerRequest)
      return this.equals((BrokerRequest)that);
    return false;
  }

  public boolean equals(BrokerRequest that) {
    if (that == null)
      return false;

    boolean this_present_queryType = true && this.isSetQueryType();
    boolean that_present_queryType = true && that.isSetQueryType();
    if (this_present_queryType || that_present_queryType) {
      if (!(this_present_queryType && that_present_queryType))
        return false;
      if (!this.queryType.equals(that.queryType))
        return false;
    }

    boolean this_present_querySource = true && this.isSetQuerySource();
    boolean that_present_querySource = true && that.isSetQuerySource();
    if (this_present_querySource || that_present_querySource) {
      if (!(this_present_querySource && that_present_querySource))
        return false;
      if (!this.querySource.equals(that.querySource))
        return false;
    }

    boolean this_present_timeInterval = true && this.isSetTimeInterval();
    boolean that_present_timeInterval = true && that.isSetTimeInterval();
    if (this_present_timeInterval || that_present_timeInterval) {
      if (!(this_present_timeInterval && that_present_timeInterval))
        return false;
      if (!this.timeInterval.equals(that.timeInterval))
        return false;
    }

    boolean this_present_duration = true && this.isSetDuration();
    boolean that_present_duration = true && that.isSetDuration();
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (!this.duration.equals(that.duration))
        return false;
    }

    boolean this_present_bucketHashKey = true && this.isSetBucketHashKey();
    boolean that_present_bucketHashKey = true && that.isSetBucketHashKey();
    if (this_present_bucketHashKey || that_present_bucketHashKey) {
      if (!(this_present_bucketHashKey && that_present_bucketHashKey))
        return false;
      if (!this.bucketHashKey.equals(that.bucketHashKey))
        return false;
    }

    boolean this_present_enableTrace = true && this.isSetEnableTrace();
    boolean that_present_enableTrace = true && that.isSetEnableTrace();
    if (this_present_enableTrace || that_present_enableTrace) {
      if (!(this_present_enableTrace && that_present_enableTrace))
        return false;
      if (this.enableTrace != that.enableTrace)
        return false;
    }

    boolean this_present_responseFormat = true && this.isSetResponseFormat();
    boolean that_present_responseFormat = true && that.isSetResponseFormat();
    if (this_present_responseFormat || that_present_responseFormat) {
      if (!(this_present_responseFormat && that_present_responseFormat))
        return false;
      if (!this.responseFormat.equals(that.responseFormat))
        return false;
    }

    boolean this_present_debugOptions = true && this.isSetDebugOptions();
    boolean that_present_debugOptions = true && that.isSetDebugOptions();
    if (this_present_debugOptions || that_present_debugOptions) {
      if (!(this_present_debugOptions && that_present_debugOptions))
        return false;
      if (!this.debugOptions.equals(that.debugOptions))
        return false;
    }

    boolean this_present_queryOptions = true && this.isSetQueryOptions();
    boolean that_present_queryOptions = true && that.isSetQueryOptions();
    if (this_present_queryOptions || that_present_queryOptions) {
      if (!(this_present_queryOptions && that_present_queryOptions))
        return false;
      if (!this.queryOptions.equals(that.queryOptions))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_selectList = true && this.isSetSelectList();
    boolean that_present_selectList = true && that.isSetSelectList();
    if (this_present_selectList || that_present_selectList) {
      if (!(this_present_selectList && that_present_selectList))
        return false;
      if (!this.selectList.equals(that.selectList))
        return false;
    }

    boolean this_present_filterExpression = true && this.isSetFilterExpression();
    boolean that_present_filterExpression = true && that.isSetFilterExpression();
    if (this_present_filterExpression || that_present_filterExpression) {
      if (!(this_present_filterExpression && that_present_filterExpression))
        return false;
      if (!this.filterExpression.equals(that.filterExpression))
        return false;
    }

    boolean this_present_groupByList = true && this.isSetGroupByList();
    boolean that_present_groupByList = true && that.isSetGroupByList();
    if (this_present_groupByList || that_present_groupByList) {
      if (!(this_present_groupByList && that_present_groupByList))
        return false;
      if (!this.groupByList.equals(that.groupByList))
        return false;
    }

    boolean this_present_orderByList = true && this.isSetOrderByList();
    boolean that_present_orderByList = true && that.isSetOrderByList();
    if (this_present_orderByList || that_present_orderByList) {
      if (!(this_present_orderByList && that_present_orderByList))
        return false;
      if (!this.orderByList.equals(that.orderByList))
        return false;
    }

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_havingExpression = true && this.isSetHavingExpression();
    boolean that_present_havingExpression = true && that.isSetHavingExpression();
    if (this_present_havingExpression || that_present_havingExpression) {
      if (!(this_present_havingExpression && that_present_havingExpression))
        return false;
      if (!this.havingExpression.equals(that.havingExpression))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_queryType = true && (isSetQueryType());
    list.add(present_queryType);
    if (present_queryType)
      list.add(queryType);

    boolean present_querySource = true && (isSetQuerySource());
    list.add(present_querySource);
    if (present_querySource)
      list.add(querySource);

    boolean present_timeInterval = true && (isSetTimeInterval());
    list.add(present_timeInterval);
    if (present_timeInterval)
      list.add(timeInterval);

    boolean present_duration = true && (isSetDuration());
    list.add(present_duration);
    if (present_duration)
      list.add(duration);

    boolean present_bucketHashKey = true && (isSetBucketHashKey());
    list.add(present_bucketHashKey);
    if (present_bucketHashKey)
      list.add(bucketHashKey);

    boolean present_enableTrace = true && (isSetEnableTrace());
    list.add(present_enableTrace);
    if (present_enableTrace)
      list.add(enableTrace);

    boolean present_responseFormat = true && (isSetResponseFormat());
    list.add(present_responseFormat);
    if (present_responseFormat)
      list.add(responseFormat);

    boolean present_debugOptions = true && (isSetDebugOptions());
    list.add(present_debugOptions);
    if (present_debugOptions)
      list.add(debugOptions);

    boolean present_queryOptions = true && (isSetQueryOptions());
    list.add(present_queryOptions);
    if (present_queryOptions)
      list.add(queryOptions);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_selectList = true && (isSetSelectList());
    list.add(present_selectList);
    if (present_selectList)
      list.add(selectList);

    boolean present_filterExpression = true && (isSetFilterExpression());
    list.add(present_filterExpression);
    if (present_filterExpression)
      list.add(filterExpression);

    boolean present_groupByList = true && (isSetGroupByList());
    list.add(present_groupByList);
    if (present_groupByList)
      list.add(groupByList);

    boolean present_orderByList = true && (isSetOrderByList());
    list.add(present_orderByList);
    if (present_orderByList)
      list.add(orderByList);

    boolean present_limit = true && (isSetLimit());
    list.add(present_limit);
    if (present_limit)
      list.add(limit);

    boolean present_offset = true && (isSetOffset());
    list.add(present_offset);
    if (present_offset)
      list.add(offset);

    boolean present_havingExpression = true && (isSetHavingExpression());
    list.add(present_havingExpression);
    if (present_havingExpression)
      list.add(havingExpression);

    return list.hashCode();
  }

  @Override
  public int compareTo(BrokerRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQueryType()).compareTo(other.isSetQueryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryType, other.queryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuerySource()).compareTo(other.isSetQuerySource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuerySource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.querySource, other.querySource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeInterval()).compareTo(other.isSetTimeInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeInterval, other.timeInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucketHashKey()).compareTo(other.isSetBucketHashKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketHashKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketHashKey, other.bucketHashKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnableTrace()).compareTo(other.isSetEnableTrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableTrace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableTrace, other.enableTrace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseFormat()).compareTo(other.isSetResponseFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseFormat, other.responseFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebugOptions()).compareTo(other.isSetDebugOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebugOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debugOptions, other.debugOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryOptions()).compareTo(other.isSetQueryOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryOptions, other.queryOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelectList()).compareTo(other.isSetSelectList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelectList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectList, other.selectList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilterExpression()).compareTo(other.isSetFilterExpression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilterExpression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterExpression, other.filterExpression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupByList()).compareTo(other.isSetGroupByList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupByList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupByList, other.groupByList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderByList()).compareTo(other.isSetOrderByList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderByList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderByList, other.orderByList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHavingExpression()).compareTo(other.isSetHavingExpression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHavingExpression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.havingExpression, other.havingExpression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BrokerRequest(");
    boolean first = true;

    if (isSetQueryType()) {
      sb.append("queryType:");
      if (this.queryType == null) {
        sb.append("null");
      } else {
        sb.append(this.queryType);
      }
      first = false;
    }
    if (isSetQuerySource()) {
      if (!first) sb.append(", ");
      sb.append("querySource:");
      if (this.querySource == null) {
        sb.append("null");
      } else {
        sb.append(this.querySource);
      }
      first = false;
    }
    if (isSetTimeInterval()) {
      if (!first) sb.append(", ");
      sb.append("timeInterval:");
      if (this.timeInterval == null) {
        sb.append("null");
      } else {
        sb.append(this.timeInterval);
      }
      first = false;
    }
    if (isSetDuration()) {
      if (!first) sb.append(", ");
      sb.append("duration:");
      if (this.duration == null) {
        sb.append("null");
      } else {
        sb.append(this.duration);
      }
      first = false;
    }
    if (isSetBucketHashKey()) {
      if (!first) sb.append(", ");
      sb.append("bucketHashKey:");
      if (this.bucketHashKey == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketHashKey);
      }
      first = false;
    }
    if (isSetEnableTrace()) {
      if (!first) sb.append(", ");
      sb.append("enableTrace:");
      sb.append(this.enableTrace);
      first = false;
    }
    if (isSetResponseFormat()) {
      if (!first) sb.append(", ");
      sb.append("responseFormat:");
      if (this.responseFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.responseFormat);
      }
      first = false;
    }
    if (isSetDebugOptions()) {
      if (!first) sb.append(", ");
      sb.append("debugOptions:");
      if (this.debugOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.debugOptions);
      }
      first = false;
    }
    if (isSetQueryOptions()) {
      if (!first) sb.append(", ");
      sb.append("queryOptions:");
      if (this.queryOptions == null) {
        sb.append("null");
      } else {
        sb.append(this.queryOptions);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetSelectList()) {
      if (!first) sb.append(", ");
      sb.append("selectList:");
      if (this.selectList == null) {
        sb.append("null");
      } else {
        sb.append(this.selectList);
      }
      first = false;
    }
    if (isSetFilterExpression()) {
      if (!first) sb.append(", ");
      sb.append("filterExpression:");
      if (this.filterExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.filterExpression);
      }
      first = false;
    }
    if (isSetGroupByList()) {
      if (!first) sb.append(", ");
      sb.append("groupByList:");
      if (this.groupByList == null) {
        sb.append("null");
      } else {
        sb.append(this.groupByList);
      }
      first = false;
    }
    if (isSetOrderByList()) {
      if (!first) sb.append(", ");
      sb.append("orderByList:");
      if (this.orderByList == null) {
        sb.append("null");
      } else {
        sb.append(this.orderByList);
      }
      first = false;
    }
    if (isSetLimit()) {
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetHavingExpression()) {
      if (!first) sb.append(", ");
      sb.append("havingExpression:");
      if (this.havingExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.havingExpression);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (queryType != null) {
      queryType.validate();
    }
    if (querySource != null) {
      querySource.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BrokerRequestStandardSchemeFactory implements SchemeFactory {
    public BrokerRequestStandardScheme getScheme() {
      return new BrokerRequestStandardScheme();
    }
  }

  private static class BrokerRequestStandardScheme extends StandardScheme<BrokerRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BrokerRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.queryType = new QueryType();
              struct.queryType.read(iprot);
              struct.setQueryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.querySource = new QuerySource();
              struct.querySource.read(iprot);
              struct.setQuerySourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeInterval = iprot.readString();
              struct.setTimeIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.duration = iprot.readString();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BUCKET_HASH_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bucketHashKey = iprot.readString();
              struct.setBucketHashKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ENABLE_TRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableTrace = iprot.readBool();
              struct.setEnableTraceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RESPONSE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.responseFormat = iprot.readString();
              struct.setResponseFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DEBUG_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.debugOptions = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.debugOptions.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setDebugOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.queryOptions = new HashMap<String,String>(2*_map4.size);
                String _key5;
                String _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.queryOptions.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setQueryOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SELECT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.selectList = new ArrayList<Expression>(_list8.size);
                Expression _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new Expression();
                  _elem9.read(iprot);
                  struct.selectList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setSelectListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FILTER_EXPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.filterExpression = new Expression();
              struct.filterExpression.read(iprot);
              struct.setFilterExpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // GROUP_BY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.groupByList = new ArrayList<Expression>(_list11.size);
                Expression _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new Expression();
                  _elem12.read(iprot);
                  struct.groupByList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setGroupByListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ORDER_BY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.orderByList = new ArrayList<Expression>(_list14.size);
                Expression _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = new Expression();
                  _elem15.read(iprot);
                  struct.orderByList.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setOrderByListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // HAVING_EXPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.havingExpression = new Expression();
              struct.havingExpression.read(iprot);
              struct.setHavingExpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BrokerRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.queryType != null) {
        if (struct.isSetQueryType()) {
          oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
          struct.queryType.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.querySource != null) {
        if (struct.isSetQuerySource()) {
          oprot.writeFieldBegin(QUERY_SOURCE_FIELD_DESC);
          struct.querySource.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeInterval != null) {
        if (struct.isSetTimeInterval()) {
          oprot.writeFieldBegin(TIME_INTERVAL_FIELD_DESC);
          oprot.writeString(struct.timeInterval);
          oprot.writeFieldEnd();
        }
      }
      if (struct.duration != null) {
        if (struct.isSetDuration()) {
          oprot.writeFieldBegin(DURATION_FIELD_DESC);
          oprot.writeString(struct.duration);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bucketHashKey != null) {
        if (struct.isSetBucketHashKey()) {
          oprot.writeFieldBegin(BUCKET_HASH_KEY_FIELD_DESC);
          oprot.writeString(struct.bucketHashKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnableTrace()) {
        oprot.writeFieldBegin(ENABLE_TRACE_FIELD_DESC);
        oprot.writeBool(struct.enableTrace);
        oprot.writeFieldEnd();
      }
      if (struct.responseFormat != null) {
        if (struct.isSetResponseFormat()) {
          oprot.writeFieldBegin(RESPONSE_FORMAT_FIELD_DESC);
          oprot.writeString(struct.responseFormat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.debugOptions != null) {
        if (struct.isSetDebugOptions()) {
          oprot.writeFieldBegin(DEBUG_OPTIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.debugOptions.size()));
            for (Map.Entry<String, String> _iter17 : struct.debugOptions.entrySet())
            {
              oprot.writeString(_iter17.getKey());
              oprot.writeString(_iter17.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.queryOptions != null) {
        if (struct.isSetQueryOptions()) {
          oprot.writeFieldBegin(QUERY_OPTIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.queryOptions.size()));
            for (Map.Entry<String, String> _iter18 : struct.queryOptions.entrySet())
            {
              oprot.writeString(_iter18.getKey());
              oprot.writeString(_iter18.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.selectList != null) {
        if (struct.isSetSelectList()) {
          oprot.writeFieldBegin(SELECT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.selectList.size()));
            for (Expression _iter19 : struct.selectList)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.filterExpression != null) {
        if (struct.isSetFilterExpression()) {
          oprot.writeFieldBegin(FILTER_EXPRESSION_FIELD_DESC);
          struct.filterExpression.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupByList != null) {
        if (struct.isSetGroupByList()) {
          oprot.writeFieldBegin(GROUP_BY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.groupByList.size()));
            for (Expression _iter20 : struct.groupByList)
            {
              _iter20.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderByList != null) {
        if (struct.isSetOrderByList()) {
          oprot.writeFieldBegin(ORDER_BY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.orderByList.size()));
            for (Expression _iter21 : struct.orderByList)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLimit()) {
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.havingExpression != null) {
        if (struct.isSetHavingExpression()) {
          oprot.writeFieldBegin(HAVING_EXPRESSION_FIELD_DESC);
          struct.havingExpression.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BrokerRequestTupleSchemeFactory implements SchemeFactory {
    public BrokerRequestTupleScheme getScheme() {
      return new BrokerRequestTupleScheme();
    }
  }

  private static class BrokerRequestTupleScheme extends TupleScheme<BrokerRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BrokerRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQueryType()) {
        optionals.set(0);
      }
      if (struct.isSetQuerySource()) {
        optionals.set(1);
      }
      if (struct.isSetTimeInterval()) {
        optionals.set(2);
      }
      if (struct.isSetDuration()) {
        optionals.set(3);
      }
      if (struct.isSetBucketHashKey()) {
        optionals.set(4);
      }
      if (struct.isSetEnableTrace()) {
        optionals.set(5);
      }
      if (struct.isSetResponseFormat()) {
        optionals.set(6);
      }
      if (struct.isSetDebugOptions()) {
        optionals.set(7);
      }
      if (struct.isSetQueryOptions()) {
        optionals.set(8);
      }
      if (struct.isSetVersion()) {
        optionals.set(9);
      }
      if (struct.isSetSelectList()) {
        optionals.set(10);
      }
      if (struct.isSetFilterExpression()) {
        optionals.set(11);
      }
      if (struct.isSetGroupByList()) {
        optionals.set(12);
      }
      if (struct.isSetOrderByList()) {
        optionals.set(13);
      }
      if (struct.isSetLimit()) {
        optionals.set(14);
      }
      if (struct.isSetOffset()) {
        optionals.set(15);
      }
      if (struct.isSetHavingExpression()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetQueryType()) {
        struct.queryType.write(oprot);
      }
      if (struct.isSetQuerySource()) {
        struct.querySource.write(oprot);
      }
      if (struct.isSetTimeInterval()) {
        oprot.writeString(struct.timeInterval);
      }
      if (struct.isSetDuration()) {
        oprot.writeString(struct.duration);
      }
      if (struct.isSetBucketHashKey()) {
        oprot.writeString(struct.bucketHashKey);
      }
      if (struct.isSetEnableTrace()) {
        oprot.writeBool(struct.enableTrace);
      }
      if (struct.isSetResponseFormat()) {
        oprot.writeString(struct.responseFormat);
      }
      if (struct.isSetDebugOptions()) {
        {
          oprot.writeI32(struct.debugOptions.size());
          for (Map.Entry<String, String> _iter22 : struct.debugOptions.entrySet())
          {
            oprot.writeString(_iter22.getKey());
            oprot.writeString(_iter22.getValue());
          }
        }
      }
      if (struct.isSetQueryOptions()) {
        {
          oprot.writeI32(struct.queryOptions.size());
          for (Map.Entry<String, String> _iter23 : struct.queryOptions.entrySet())
          {
            oprot.writeString(_iter23.getKey());
            oprot.writeString(_iter23.getValue());
          }
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetSelectList()) {
        {
          oprot.writeI32(struct.selectList.size());
          for (Expression _iter24 : struct.selectList)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetFilterExpression()) {
        struct.filterExpression.write(oprot);
      }
      if (struct.isSetGroupByList()) {
        {
          oprot.writeI32(struct.groupByList.size());
          for (Expression _iter25 : struct.groupByList)
          {
            _iter25.write(oprot);
          }
        }
      }
      if (struct.isSetOrderByList()) {
        {
          oprot.writeI32(struct.orderByList.size());
          for (Expression _iter26 : struct.orderByList)
          {
            _iter26.write(oprot);
          }
        }
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetHavingExpression()) {
        struct.havingExpression.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BrokerRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.queryType = new QueryType();
        struct.queryType.read(iprot);
        struct.setQueryTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.querySource = new QuerySource();
        struct.querySource.read(iprot);
        struct.setQuerySourceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timeInterval = iprot.readString();
        struct.setTimeIntervalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.duration = iprot.readString();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bucketHashKey = iprot.readString();
        struct.setBucketHashKeyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.enableTrace = iprot.readBool();
        struct.setEnableTraceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.responseFormat = iprot.readString();
        struct.setResponseFormatIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.debugOptions = new HashMap<String,String>(2*_map27.size);
          String _key28;
          String _val29;
          for (int _i30 = 0; _i30 < _map27.size; ++_i30)
          {
            _key28 = iprot.readString();
            _val29 = iprot.readString();
            struct.debugOptions.put(_key28, _val29);
          }
        }
        struct.setDebugOptionsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map31 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.queryOptions = new HashMap<String,String>(2*_map31.size);
          String _key32;
          String _val33;
          for (int _i34 = 0; _i34 < _map31.size; ++_i34)
          {
            _key32 = iprot.readString();
            _val33 = iprot.readString();
            struct.queryOptions.put(_key32, _val33);
          }
        }
        struct.setQueryOptionsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.selectList = new ArrayList<Expression>(_list35.size);
          Expression _elem36;
          for (int _i37 = 0; _i37 < _list35.size; ++_i37)
          {
            _elem36 = new Expression();
            _elem36.read(iprot);
            struct.selectList.add(_elem36);
          }
        }
        struct.setSelectListIsSet(true);
      }
      if (incoming.get(11)) {
        struct.filterExpression = new Expression();
        struct.filterExpression.read(iprot);
        struct.setFilterExpressionIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list38 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.groupByList = new ArrayList<Expression>(_list38.size);
          Expression _elem39;
          for (int _i40 = 0; _i40 < _list38.size; ++_i40)
          {
            _elem39 = new Expression();
            _elem39.read(iprot);
            struct.groupByList.add(_elem39);
          }
        }
        struct.setGroupByListIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.orderByList = new ArrayList<Expression>(_list41.size);
          Expression _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = new Expression();
            _elem42.read(iprot);
            struct.orderByList.add(_elem42);
          }
        }
        struct.setOrderByListIsSet(true);
      }
      if (incoming.get(14)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(15)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(16)) {
        struct.havingExpression = new Expression();
        struct.havingExpression.read(iprot);
        struct.setHavingExpressionIsSet(true);
      }
    }
  }

}

